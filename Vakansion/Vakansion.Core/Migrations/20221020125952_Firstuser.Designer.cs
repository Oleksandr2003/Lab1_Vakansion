// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vakansion.Core;

#nullable disable

namespace Vakansion.Core.Migrations
{
    [DbContext(typeof(VacancyContext))]
    [Migration("20221020125952_Firstuser")]
    partial class Firstuser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "742b9e6a-946d-400c-ad13-d47e6a35a0fd",
                            ConcurrencyStamp = "b0e37c80-39d5-4030-bf9b-20fe36b36c7d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7e8c7954-58ce-4fe2-ad77-ddaff9c97d5e",
                            ConcurrencyStamp = "d0fb06c7-87ba-4ff4-b46e-d7536569a0fa",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2db26ba6-a036-437d-b946-72e8888ab53e",
                            RoleId = "742b9e6a-946d-400c-ad13-d47e6a35a0fd"
                        },
                        new
                        {
                            UserId = "e5c042c4-e785-4408-a607-86d0953b7588",
                            RoleId = "742b9e6a-946d-400c-ad13-d47e6a35a0fd"
                        },
                        new
                        {
                            UserId = "e5c042c4-e785-4408-a607-86d0953b7588",
                            RoleId = "7e8c7954-58ce-4fe2-ad77-ddaff9c97d5e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vakansion.Core.Data", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("Vakansion.Core.Education", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Vakansion.Core.Employer", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Vakansion.Core.Position", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataId")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("DataId")
                        .IsUnique();

                    b.HasIndex("EducationId")
                        .IsUnique();

                    b.ToTable("Unemployeds");
                });

            modelBuilder.Entity("Vakansion.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2db26ba6-a036-437d-b946-72e8888ab53e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69a4fec9-2c68-48dd-9b77-bdd02c87db55",
                            Email = "admin@vacansyukraine.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VACANSYUKRAINE.COM",
                            NormalizedUserName = "ADMIN@VACANSYUKRAINE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKsA4q8KKO/A6O4eBc2NAVc6K/lnpcSURkdAtQ7/bnFGDOQuCqroe4Uh7FMu/hcu0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd1be8bb-8d57-4ae9-8811-ed2e62ee977d",
                            TwoFactorEnabled = false,
                            UserName = "admin@vacansyukraine.com"
                        },
                        new
                        {
                            Id = "e5c042c4-e785-4408-a607-86d0953b7588",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1728fc7-707f-4aa3-991e-b9332c91303e",
                            Email = "user@vacansyukraine.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VACANSYUKRAINE.COM",
                            NormalizedUserName = "USER@VACANSYUKRAINE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEWdmI/zk2sPiDZ4YvEyXb/z9XueU5Rk9g3BeyQDGXUXzKad1pYEuCBrwzYrGhaGjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c810d04f-8305-4ae5-9c5b-58d0f1b679ad",
                            TwoFactorEnabled = false,
                            UserName = "user@vacansyukraine.com"
                        });
                });

            modelBuilder.Entity("Vakansion.Core.Vacancys", b =>
                {
                    b.Property<int>("VacancysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VacancysId"), 1L, 1);

                    b.Property<int?>("DataClassId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationClassId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("UnemployedId")
                        .HasColumnType("int");

                    b.HasKey("VacancysId");

                    b.HasIndex("DataClassId");

                    b.HasIndex("EducationClassId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UnemployedId");

                    b.ToTable("Vacancyses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.HasOne("Vakansion.Core.Data", "Datas")
                        .WithOne("Unemployeds")
                        .HasForeignKey("Vakansion.Core.Unemployed", "DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.Education", "Educations")
                        .WithOne("Unemployeds")
                        .HasForeignKey("Vakansion.Core.Unemployed", "EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datas");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Vakansion.Core.Vacancys", b =>
                {
                    b.HasOne("Vakansion.Core.Data", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("DataClassId");

                    b.HasOne("Vakansion.Core.Education", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("EducationClassId");

                    b.HasOne("Vakansion.Core.Employer", "Employers")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.Position", "Positions")
                        .WithMany("Vacancies")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.Unemployed", "Unemployeds")
                        .WithMany("Vacancies")
                        .HasForeignKey("UnemployedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employers");

                    b.Navigation("Positions");

                    b.Navigation("Unemployeds");
                });

            modelBuilder.Entity("Vakansion.Core.Data", b =>
                {
                    b.Navigation("Unemployeds");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Education", b =>
                {
                    b.Navigation("Unemployeds");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Employer", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Position", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
