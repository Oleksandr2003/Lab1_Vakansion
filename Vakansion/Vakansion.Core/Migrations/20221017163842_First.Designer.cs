// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vakansion.Core;

#nullable disable

namespace Vakansion.Core.Migrations
{
    [DbContext(typeof(VacancyContext))]
    [Migration("20221017163842_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bfa31fb9-7b11-4f2b-b710-0e7243443fbf",
                            ConcurrencyStamp = "8b617f60-e2a8-4e9d-a980-2dd07903b154",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "80d9bb10-67b5-4b48-9500-c6d7c71bede4",
                            ConcurrencyStamp = "23de16ae-1288-43c2-9e27-84c42d8d12a6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "962ca386-78fa-4c52-a694-df60fc4cd2d0",
                            RoleId = "bfa31fb9-7b11-4f2b-b710-0e7243443fbf"
                        },
                        new
                        {
                            UserId = "1c5ea35f-361a-45d7-8a77-71a2a359f679",
                            RoleId = "bfa31fb9-7b11-4f2b-b710-0e7243443fbf"
                        },
                        new
                        {
                            UserId = "1c5ea35f-361a-45d7-8a77-71a2a359f679",
                            RoleId = "80d9bb10-67b5-4b48-9500-c6d7c71bede4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vakansion.Core.Data", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnemployedClassId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("UnemployedClassId");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("Vakansion.Core.Education", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnemployedClassId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("UnemployedClassId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Vakansion.Core.Employer", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Vakansion.Core.Position", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataId")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int?>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Unemployeds");
                });

            modelBuilder.Entity("Vakansion.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "962ca386-78fa-4c52-a694-df60fc4cd2d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26f787fc-9316-4ec4-bfac-a1160ee096a6",
                            Email = "admin@vacansyukraine.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VACANSYUKRAINE.COM",
                            NormalizedUserName = "ADMIN@VACANSYUKRAINE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJBeXzF3EHoZCFv99WbDDHccAO4XFMalaHMcv9Qn33+vnvt6i5Oh4tvCkUlcau0VhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "faa38e43-967b-462f-9ef2-e9720064b62a",
                            TwoFactorEnabled = false,
                            UserName = "admin@vacansyukraine.com"
                        },
                        new
                        {
                            Id = "1c5ea35f-361a-45d7-8a77-71a2a359f679",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c069f7b-575e-4da5-9da0-5e6bffe98b41",
                            Email = "user@vacansyukraine.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VACANSYUKRAINE.COM",
                            NormalizedUserName = "USER@VACANSYUKRAINE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOkbXyQQ1wdQIA//a5h7pD4AYM06wcceGkQpNx4z4Up/DFYy5I3+JF19f+RbgpCWdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5f52490-8e51-4f40-85fe-1e823680a95f",
                            TwoFactorEnabled = false,
                            UserName = "user@vacansyukraine.com"
                        });
                });

            modelBuilder.Entity("Vakansion.Core.Vacancy", b =>
                {
                    b.Property<int>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VacancyId"), 1L, 1);

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("UnemployedId")
                        .HasColumnType("int");

                    b.HasKey("VacancyId");

                    b.ToTable("Vacancys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vakansion.Core.Data", b =>
                {
                    b.HasOne("Vakansion.Core.Unemployed", null)
                        .WithMany("Datas")
                        .HasForeignKey("UnemployedClassId");
                });

            modelBuilder.Entity("Vakansion.Core.Education", b =>
                {
                    b.HasOne("Vakansion.Core.Unemployed", null)
                        .WithMany("Educations")
                        .HasForeignKey("UnemployedClassId");
                });

            modelBuilder.Entity("Vakansion.Core.Employer", b =>
                {
                    b.HasOne("Vakansion.Core.Vacancy", null)
                        .WithMany("Employers")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("Vakansion.Core.Position", b =>
                {
                    b.HasOne("Vakansion.Core.Vacancy", null)
                        .WithMany("Positions")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.HasOne("Vakansion.Core.Vacancy", null)
                        .WithMany("Unemployeds")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.Navigation("Datas");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Vakansion.Core.Vacancy", b =>
                {
                    b.Navigation("Employers");

                    b.Navigation("Positions");

                    b.Navigation("Unemployeds");
                });
#pragma warning restore 612, 618
        }
    }
}
