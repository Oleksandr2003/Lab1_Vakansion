// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vakansion.Core;

#nullable disable

namespace Vakansion.Core.Migrations
{
    [DbContext(typeof(VacancyContext))]
    partial class VacancyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            Id = "706a77ed-bb8b-47a1-9a80-a06931d02e49",
                            ConcurrencyStamp = "7a68ce91-efce-4044-963e-d3910100f1e5",
=======
                            Id = "4a125544-5ac0-4927-a181-b7ef3547562a",
                            ConcurrencyStamp = "0a01f496-738a-4781-9dfc-eec1f23de4cd",
>>>>>>> Stashed changes
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "cc2c8e5a-0ef5-4397-be24-f62194674072",
                            ConcurrencyStamp = "b0c5b333-52cc-4c21-884d-1f32fd66ace8",
=======
                            Id = "705ba428-5f5e-4ae3-b884-504cf3a3a4e1",
                            ConcurrencyStamp = "f0f3f692-fe58-4c52-804e-322f1b0e90a7",
>>>>>>> Stashed changes
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            UserId = "88c575fc-5f94-49ff-acb2-9fcc9402d481",
                            RoleId = "706a77ed-bb8b-47a1-9a80-a06931d02e49"
                        },
                        new
                        {
                            UserId = "523a7c7f-773b-4f91-b6ca-ddd3f6ad1e92",
                            RoleId = "706a77ed-bb8b-47a1-9a80-a06931d02e49"
                        },
                        new
                        {
                            UserId = "523a7c7f-773b-4f91-b6ca-ddd3f6ad1e92",
                            RoleId = "cc2c8e5a-0ef5-4397-be24-f62194674072"
=======
                            UserId = "76b3fb1f-1201-452e-b1bb-d0d1aac44cad",
                            RoleId = "4a125544-5ac0-4927-a181-b7ef3547562a"
                        },
                        new
                        {
                            UserId = "be7003a7-d841-46d4-adfb-92db7ed1ae39",
                            RoleId = "4a125544-5ac0-4927-a181-b7ef3547562a"
                        },
                        new
                        {
                            UserId = "be7003a7-d841-46d4-adfb-92db7ed1ae39",
                            RoleId = "705ba428-5f5e-4ae3-b884-504cf3a3a4e1"
>>>>>>> Stashed changes
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vakansion.Core.Data", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("Vakansion.Core.Education", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Vakansion.Core.Employer", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Vakansion.Core.Position", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataId")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("DataId")
                        .IsUnique();

                    b.HasIndex("EducationId")
                        .IsUnique();

                    b.ToTable("Unemployeds");
                });

            modelBuilder.Entity("Vakansion.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            Id = "88c575fc-5f94-49ff-acb2-9fcc9402d481",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e17bb092-b586-493f-8dc1-8b31a56b38eb",
=======
                            Id = "76b3fb1f-1201-452e-b1bb-d0d1aac44cad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5205b5d-39eb-4618-9ccc-60d04e010bd5",
>>>>>>> Stashed changes
                            Email = "admin@vacansyukraine.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VACANSYUKRAINE.COM",
                            NormalizedUserName = "ADMIN@VACANSYUKRAINE.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAEEX0TIFbt3IrXQndzFNtFatcpfdRMA86jd/qXPaeCnUGFILRsBKtkoN31QsphEcgFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "497ef9be-d226-4a8f-9806-d19fc609eb0d",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEE3N2Re+5dQc4tr6rworgNjEFEsa5RCPTjiJMvSbWGuEYRiwfZ1Ed16YHOnIkDHewQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22754281-a0a9-4896-a64f-a58ba77a5410",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "admin@vacansyukraine.com"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "523a7c7f-773b-4f91-b6ca-ddd3f6ad1e92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cb0c9b4-9345-4b57-a6d9-10be97ca0fd3",
=======
                            Id = "be7003a7-d841-46d4-adfb-92db7ed1ae39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0dc5df06-3f9f-4d96-9c37-0270ea66f9f3",
>>>>>>> Stashed changes
                            Email = "user@vacansyukraine.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VACANSYUKRAINE.COM",
                            NormalizedUserName = "USER@VACANSYUKRAINE.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAECyWYP+qwdHUY+hLxb/ilyuLtAw+Hd422ogoMkDnPVMuczUHmJE4+CUhBvFVb2WEzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3829778-303c-4308-a595-f63f337d73b8",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEKsLm+LPJfP1sOuJ1mbke4qJWfSSBksIGxTS5ZMwXiFKGjB9Ix/POCOnXDoxmIGLoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cf71d8a-621b-4fd1-a9fd-8ec18391e9d5",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "user@vacansyukraine.com"
                        });
                });

            modelBuilder.Entity("Vakansion.Core.Vacancys", b =>
                {
                    b.Property<int>("VacancysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VacancysId"), 1L, 1);

                    b.Property<int?>("DataClassId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationClassId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("UnemployedId")
                        .HasColumnType("int");

                    b.HasKey("VacancysId");

                    b.HasIndex("DataClassId");

                    b.HasIndex("EducationClassId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UnemployedId");

                    b.ToTable("Vacancyses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vakansion.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.HasOne("Vakansion.Core.Data", "Datas")
                        .WithOne("Unemployeds")
                        .HasForeignKey("Vakansion.Core.Unemployed", "DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.Education", "Educations")
                        .WithOne("Unemployeds")
                        .HasForeignKey("Vakansion.Core.Unemployed", "EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datas");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Vakansion.Core.Vacancys", b =>
                {
                    b.HasOne("Vakansion.Core.Data", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("DataClassId");

                    b.HasOne("Vakansion.Core.Education", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("EducationClassId");

                    b.HasOne("Vakansion.Core.Employer", "Employers")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.Position", "Positions")
                        .WithMany("Vacancies")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vakansion.Core.Unemployed", "Unemployeds")
                        .WithMany("Vacancies")
                        .HasForeignKey("UnemployedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employers");

                    b.Navigation("Positions");

                    b.Navigation("Unemployeds");
                });

            modelBuilder.Entity("Vakansion.Core.Data", b =>
                {
                    b.Navigation("Unemployeds");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Education", b =>
                {
                    b.Navigation("Unemployeds");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Employer", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Position", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Vakansion.Core.Unemployed", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
